// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [email], onDelete: Cascade)
}

model User {
  id                 String               @id @default(uuid())
  name               String?
  email              String               @unique
  password           String?
  university         String?
  country            String?
  countryCode        String?
  state              String?
  city               String?
  bio                String?
  emailVerified      Boolean
  image              String?
  posts              Post[]
  likes              Like[]
  sessions           Session[]
  opportunities      Opportunity[]
  upvotes            Upvote[]
  OpportunityComment OpportunityComment[]
  Comment            Comment[]
}

model ValidUniversity {
  id             String    @id @default(uuid())
  name           String
  domains        domain[]
  web_pages      webPage[]
  country        String
  alpha_two_code String
  state_province String?
}

model domain {
  id                String          @id @default(uuid())
  domainName        String
  ValidUniversity   ValidUniversity @relation(fields: [validUniversityId], references: [id])
  validUniversityId String
}

model webPage {
  id                String          @id @default(uuid())
  webPageName       String
  ValidUniversity   ValidUniversity @relation(fields: [validUniversityId], references: [id])
  validUniversityId String
}

model Post {
  id         String    @id @default(uuid())
  title      String
  content    String
  mediaUrl   String?
  mediaType  String?
  likesCount Int       @default(0)
  viewsCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [email])
  authorId   String
  likes      Like[]
  type       Type?
  Comment    Comment[]
}

model Opportunity {
  id                 String               @id @default(uuid())
  title              String
  description        String
  views              Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  tags               Tag[]
  users              User                 @relation(fields: [userId], references: [email], onDelete: Cascade)
  userId             String
  upvotes            Upvote[]
  OpportunityComment OpportunityComment[]
}

model Upvote {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [email], onDelete: Cascade)
  userId        String
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String?

  @@unique([userId, opportunityId])
}

model OpportunityComment {
  id            String      @id @default(uuid())
  content       String
  upvotes       Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  user          User        @relation(fields: [userId], references: [email], onDelete: Cascade)
  userId        String
}

model Tag {
  id            String      @id @default(uuid())
  name          String
  Opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [email])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [email])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

// Enums

enum Type {
  PUBLIC
  PRIVATE
}
